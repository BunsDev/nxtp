/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface RelayerFacetInterface extends utils.Interface {
  functions: {
    "addRelayer(address)": FunctionFragment;
    "approvedRelayers(address)": FunctionFragment;
    "claim(address,bytes32[])": FunctionFragment;
    "initiateClaim(uint32,address,bytes32[])": FunctionFragment;
    "relayerFeeRouter()": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "setRelayerFeeRouter(address)": FunctionFragment;
    "transferRelayer(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRelayer"
      | "approvedRelayers"
      | "claim"
      | "initiateClaim"
      | "relayerFeeRouter"
      | "removeRelayer"
      | "setRelayerFeeRouter"
      | "transferRelayer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRelayers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateClaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerFeeRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRelayer",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerFeeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRelayer",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,bytes32[])": EventFragment;
    "InitiatedClaim(uint32,address,address,bytes32[])": EventFragment;
    "RelayerAdded(address,address)": EventFragment;
    "RelayerFeeRouterUpdated(address,address,address)": EventFragment;
    "RelayerRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiatedClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerFeeRouterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
}

export interface ClaimedEventObject {
  recipient: string;
  total: BigNumber;
  transferIds: string[];
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, string[]],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface InitiatedClaimEventObject {
  domain: number;
  recipient: string;
  caller: string;
  transferIds: string[];
}
export type InitiatedClaimEvent = TypedEvent<
  [number, string, string, string[]],
  InitiatedClaimEventObject
>;

export type InitiatedClaimEventFilter = TypedEventFilter<InitiatedClaimEvent>;

export interface RelayerAddedEventObject {
  relayer: string;
  caller: string;
}
export type RelayerAddedEvent = TypedEvent<
  [string, string],
  RelayerAddedEventObject
>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerFeeRouterUpdatedEventObject {
  oldRouter: string;
  newRouter: string;
  caller: string;
}
export type RelayerFeeRouterUpdatedEvent = TypedEvent<
  [string, string, string],
  RelayerFeeRouterUpdatedEventObject
>;

export type RelayerFeeRouterUpdatedEventFilter =
  TypedEventFilter<RelayerFeeRouterUpdatedEvent>;

export interface RelayerRemovedEventObject {
  relayer: string;
  caller: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string, string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface RelayerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayerFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateClaim(
      _domain: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<[string]>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayerFeeRouter(
      _relayerFeeRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferRelayer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvedRelayers(
    _relayer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    _recipient: PromiseOrValue<string>,
    _transferIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateClaim(
    _domain: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _transferIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relayerFeeRouter(overrides?: CallOverrides): Promise<string>;

  removeRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayerFeeRouter(
    _relayerFeeRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferRelayer(
    _transferId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    initiateClaim(
      _domain: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<string>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerFeeRouter(
      _relayerFeeRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRelayer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Claimed(address,uint256,bytes32[])"(
      recipient?: PromiseOrValue<string> | null,
      total?: null,
      transferIds?: null
    ): ClaimedEventFilter;
    Claimed(
      recipient?: PromiseOrValue<string> | null,
      total?: null,
      transferIds?: null
    ): ClaimedEventFilter;

    "InitiatedClaim(uint32,address,address,bytes32[])"(
      domain?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      caller?: null,
      transferIds?: null
    ): InitiatedClaimEventFilter;
    InitiatedClaim(
      domain?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      caller?: null,
      transferIds?: null
    ): InitiatedClaimEventFilter;

    "RelayerAdded(address,address)"(
      relayer?: null,
      caller?: null
    ): RelayerAddedEventFilter;
    RelayerAdded(relayer?: null, caller?: null): RelayerAddedEventFilter;

    "RelayerFeeRouterUpdated(address,address,address)"(
      oldRouter?: null,
      newRouter?: null,
      caller?: null
    ): RelayerFeeRouterUpdatedEventFilter;
    RelayerFeeRouterUpdated(
      oldRouter?: null,
      newRouter?: null,
      caller?: null
    ): RelayerFeeRouterUpdatedEventFilter;

    "RelayerRemoved(address,address)"(
      relayer?: null,
      caller?: null
    ): RelayerRemovedEventFilter;
    RelayerRemoved(relayer?: null, caller?: null): RelayerRemovedEventFilter;
  };

  estimateGas: {
    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateClaim(
      _domain: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayerFeeRouter(
      _relayerFeeRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferRelayer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvedRelayers(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateClaim(
      _domain: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _transferIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relayerFeeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerFeeRouter(
      _relayerFeeRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferRelayer(
      _transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
