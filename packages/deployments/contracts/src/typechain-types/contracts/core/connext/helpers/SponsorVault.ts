/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace SponsorVault {
  export type RateStruct = {
    num: PromiseOrValue<BigNumberish>;
    den: PromiseOrValue<BigNumberish>;
  };

  export type RateStructOutput = [BigNumber, BigNumber] & {
    num: BigNumber;
    den: BigNumber;
  };
}

export interface SponsorVaultInterface extends utils.Interface {
  functions: {
    "connext()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "gasTokenOracle()": FunctionFragment;
    "liquidityFeeCaps(address)": FunctionFragment;
    "maxPriceDiffPercent()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "rates(uint32)": FunctionFragment;
    "reimburseLiquidityFees(address,uint256,address)": FunctionFragment;
    "reimburseRelayerFees(uint32,address,uint256)": FunctionFragment;
    "reimbursedLiquidityFees(address,address)": FunctionFragment;
    "relayerFeeCap()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setConnext(address)": FunctionFragment;
    "setGasTokenOracle(address)": FunctionFragment;
    "setLiquidityFeeCap(address,uint256)": FunctionFragment;
    "setMaxPriceDiffPercent(uint256)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setRate(uint32,(uint256,uint256))": FunctionFragment;
    "setRelayerFeeCap(uint256)": FunctionFragment;
    "setTokenExchange(address,address)": FunctionFragment;
    "tokenExchanges(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "connext"
      | "deposit"
      | "gasTokenOracle"
      | "liquidityFeeCaps"
      | "maxPriceDiffPercent"
      | "owner"
      | "priceOracle"
      | "rates"
      | "reimburseLiquidityFees"
      | "reimburseRelayerFees"
      | "reimbursedLiquidityFees"
      | "relayerFeeCap"
      | "renounceOwnership"
      | "setConnext"
      | "setGasTokenOracle"
      | "setLiquidityFeeCap"
      | "setMaxPriceDiffPercent"
      | "setPriceOracle"
      | "setRate"
      | "setRelayerFeeCap"
      | "setTokenExchange"
      | "tokenExchanges"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasTokenOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFeeCaps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceDiffPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reimburseLiquidityFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reimburseRelayerFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reimbursedLiquidityFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConnext",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasTokenOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeeCap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceDiffPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [PromiseOrValue<BigNumberish>, SponsorVault.RateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerFeeCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenExchange",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenExchanges",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFeeCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceDiffPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reimburseLiquidityFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reimburseRelayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reimbursedLiquidityFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConnext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeeCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceDiffPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerFeeCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ConnextUpdated(address,address,address)": EventFragment;
    "Deposit(address,uint256,address)": EventFragment;
    "GasTokenOracleUpdated(address,address,address)": EventFragment;
    "LiquidityFeeCapUpdated(address,uint256,uint256,address)": EventFragment;
    "MaxPriceDiffPercentUpdated(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceOracleUpdated(address,address,address)": EventFragment;
    "RateUpdated(uint32,tuple,tuple,address)": EventFragment;
    "ReimburseLiquidityFees(address,uint256,address)": EventFragment;
    "ReimburseRelayerFees(uint256,address)": EventFragment;
    "RelayerFeeCapUpdated(uint256,uint256,address)": EventFragment;
    "TokenExchangeUpdated(address,address,address,address)": EventFragment;
    "Withdraw(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConnextUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasTokenOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityFeeCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxPriceDiffPercentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReimburseLiquidityFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReimburseRelayerFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerFeeCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchangeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ConnextUpdatedEventObject {
  oldConnext: string;
  newConnext: string;
  caller: string;
}
export type ConnextUpdatedEvent = TypedEvent<
  [string, string, string],
  ConnextUpdatedEventObject
>;

export type ConnextUpdatedEventFilter = TypedEventFilter<ConnextUpdatedEvent>;

export interface DepositEventObject {
  token: string;
  amount: BigNumber;
  caller: string;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface GasTokenOracleUpdatedEventObject {
  oldOracle: string;
  newOracle: string;
  caller: string;
}
export type GasTokenOracleUpdatedEvent = TypedEvent<
  [string, string, string],
  GasTokenOracleUpdatedEventObject
>;

export type GasTokenOracleUpdatedEventFilter =
  TypedEventFilter<GasTokenOracleUpdatedEvent>;

export interface LiquidityFeeCapUpdatedEventObject {
  asset: string;
  oldLiquidityFeeCap: BigNumber;
  newLiquidityFeeCap: BigNumber;
  caller: string;
}
export type LiquidityFeeCapUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  LiquidityFeeCapUpdatedEventObject
>;

export type LiquidityFeeCapUpdatedEventFilter =
  TypedEventFilter<LiquidityFeeCapUpdatedEvent>;

export interface MaxPriceDiffPercentUpdatedEventObject {
  oldMaxPriceDiffPercent: BigNumber;
  newMaxPriceDiffPercent: BigNumber;
  caller: string;
}
export type MaxPriceDiffPercentUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  MaxPriceDiffPercentUpdatedEventObject
>;

export type MaxPriceDiffPercentUpdatedEventFilter =
  TypedEventFilter<MaxPriceDiffPercentUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceOracleUpdatedEventObject {
  oldOracle: string;
  newOracle: string;
  caller: string;
}
export type PriceOracleUpdatedEvent = TypedEvent<
  [string, string, string],
  PriceOracleUpdatedEventObject
>;

export type PriceOracleUpdatedEventFilter =
  TypedEventFilter<PriceOracleUpdatedEvent>;

export interface RateUpdatedEventObject {
  originDomain: number;
  oldRate: SponsorVault.RateStructOutput;
  newRate: SponsorVault.RateStructOutput;
  caller: string;
}
export type RateUpdatedEvent = TypedEvent<
  [
    number,
    SponsorVault.RateStructOutput,
    SponsorVault.RateStructOutput,
    string
  ],
  RateUpdatedEventObject
>;

export type RateUpdatedEventFilter = TypedEventFilter<RateUpdatedEvent>;

export interface ReimburseLiquidityFeesEventObject {
  token: string;
  amount: BigNumber;
  receiver: string;
}
export type ReimburseLiquidityFeesEvent = TypedEvent<
  [string, BigNumber, string],
  ReimburseLiquidityFeesEventObject
>;

export type ReimburseLiquidityFeesEventFilter =
  TypedEventFilter<ReimburseLiquidityFeesEvent>;

export interface ReimburseRelayerFeesEventObject {
  amount: BigNumber;
  receiver: string;
}
export type ReimburseRelayerFeesEvent = TypedEvent<
  [BigNumber, string],
  ReimburseRelayerFeesEventObject
>;

export type ReimburseRelayerFeesEventFilter =
  TypedEventFilter<ReimburseRelayerFeesEvent>;

export interface RelayerFeeCapUpdatedEventObject {
  oldRelayerFeeCap: BigNumber;
  newRelayerFeeCap: BigNumber;
  caller: string;
}
export type RelayerFeeCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  RelayerFeeCapUpdatedEventObject
>;

export type RelayerFeeCapUpdatedEventFilter =
  TypedEventFilter<RelayerFeeCapUpdatedEvent>;

export interface TokenExchangeUpdatedEventObject {
  token: string;
  oldTokenExchange: string;
  newTokenExchange: string;
  caller: string;
}
export type TokenExchangeUpdatedEvent = TypedEvent<
  [string, string, string, string],
  TokenExchangeUpdatedEventObject
>;

export type TokenExchangeUpdatedEventFilter =
  TypedEventFilter<TokenExchangeUpdatedEvent>;

export interface WithdrawEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
  caller: string;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, string],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SponsorVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SponsorVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connext(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasTokenOracle(overrides?: CallOverrides): Promise<[string]>;

    liquidityFeeCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPriceDiffPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num: BigNumber; den: BigNumber }>;

    reimburseLiquidityFees(
      _token: PromiseOrValue<string>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reimburseRelayerFees(
      _originDomain: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _originRelayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reimbursedLiquidityFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relayerFeeCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasTokenOracle(
      _gasTokenOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFeeCap(
      _asset: PromiseOrValue<string>,
      _liquidityFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceDiffPercent(
      _maxPriceDiffPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRate(
      _originDomain: PromiseOrValue<BigNumberish>,
      _rate: SponsorVault.RateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayerFeeCap(
      _relayerFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenExchange(
      _token: PromiseOrValue<string>,
      _tokenExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenExchanges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  connext(overrides?: CallOverrides): Promise<string>;

  deposit(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasTokenOracle(overrides?: CallOverrides): Promise<string>;

  liquidityFeeCaps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPriceDiffPercent(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  rates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { num: BigNumber; den: BigNumber }>;

  reimburseLiquidityFees(
    _token: PromiseOrValue<string>,
    _liquidityFee: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reimburseRelayerFees(
    _originDomain: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _originRelayerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reimbursedLiquidityFees(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relayerFeeCap(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConnext(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasTokenOracle(
    _gasTokenOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFeeCap(
    _asset: PromiseOrValue<string>,
    _liquidityFeeCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceDiffPercent(
    _maxPriceDiffPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    _priceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRate(
    _originDomain: PromiseOrValue<BigNumberish>,
    _rate: SponsorVault.RateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayerFeeCap(
    _relayerFeeCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenExchange(
    _token: PromiseOrValue<string>,
    _tokenExchange: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenExchanges(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    connext(overrides?: CallOverrides): Promise<string>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gasTokenOracle(overrides?: CallOverrides): Promise<string>;

    liquidityFeeCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceDiffPercent(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { num: BigNumber; den: BigNumber }>;

    reimburseLiquidityFees(
      _token: PromiseOrValue<string>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reimburseRelayerFees(
      _originDomain: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _originRelayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reimbursedLiquidityFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayerFeeCap(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasTokenOracle(
      _gasTokenOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityFeeCap(
      _asset: PromiseOrValue<string>,
      _liquidityFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceDiffPercent(
      _maxPriceDiffPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRate(
      _originDomain: PromiseOrValue<BigNumberish>,
      _rate: SponsorVault.RateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerFeeCap(
      _relayerFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenExchange(
      _token: PromiseOrValue<string>,
      _tokenExchange: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenExchanges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConnextUpdated(address,address,address)"(
      oldConnext?: null,
      newConnext?: null,
      caller?: null
    ): ConnextUpdatedEventFilter;
    ConnextUpdated(
      oldConnext?: null,
      newConnext?: null,
      caller?: null
    ): ConnextUpdatedEventFilter;

    "Deposit(address,uint256,address)"(
      token?: null,
      amount?: null,
      caller?: null
    ): DepositEventFilter;
    Deposit(token?: null, amount?: null, caller?: null): DepositEventFilter;

    "GasTokenOracleUpdated(address,address,address)"(
      oldOracle?: null,
      newOracle?: null,
      caller?: null
    ): GasTokenOracleUpdatedEventFilter;
    GasTokenOracleUpdated(
      oldOracle?: null,
      newOracle?: null,
      caller?: null
    ): GasTokenOracleUpdatedEventFilter;

    "LiquidityFeeCapUpdated(address,uint256,uint256,address)"(
      asset?: PromiseOrValue<string> | null,
      oldLiquidityFeeCap?: null,
      newLiquidityFeeCap?: null,
      caller?: null
    ): LiquidityFeeCapUpdatedEventFilter;
    LiquidityFeeCapUpdated(
      asset?: PromiseOrValue<string> | null,
      oldLiquidityFeeCap?: null,
      newLiquidityFeeCap?: null,
      caller?: null
    ): LiquidityFeeCapUpdatedEventFilter;

    "MaxPriceDiffPercentUpdated(uint256,uint256,address)"(
      oldMaxPriceDiffPercent?: null,
      newMaxPriceDiffPercent?: null,
      caller?: null
    ): MaxPriceDiffPercentUpdatedEventFilter;
    MaxPriceDiffPercentUpdated(
      oldMaxPriceDiffPercent?: null,
      newMaxPriceDiffPercent?: null,
      caller?: null
    ): MaxPriceDiffPercentUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceOracleUpdated(address,address,address)"(
      oldOracle?: null,
      newOracle?: null,
      caller?: null
    ): PriceOracleUpdatedEventFilter;
    PriceOracleUpdated(
      oldOracle?: null,
      newOracle?: null,
      caller?: null
    ): PriceOracleUpdatedEventFilter;

    "RateUpdated(uint32,tuple,tuple,address)"(
      originDomain?: null,
      oldRate?: null,
      newRate?: null,
      caller?: null
    ): RateUpdatedEventFilter;
    RateUpdated(
      originDomain?: null,
      oldRate?: null,
      newRate?: null,
      caller?: null
    ): RateUpdatedEventFilter;

    "ReimburseLiquidityFees(address,uint256,address)"(
      token?: null,
      amount?: null,
      receiver?: null
    ): ReimburseLiquidityFeesEventFilter;
    ReimburseLiquidityFees(
      token?: null,
      amount?: null,
      receiver?: null
    ): ReimburseLiquidityFeesEventFilter;

    "ReimburseRelayerFees(uint256,address)"(
      amount?: null,
      receiver?: null
    ): ReimburseRelayerFeesEventFilter;
    ReimburseRelayerFees(
      amount?: null,
      receiver?: null
    ): ReimburseRelayerFeesEventFilter;

    "RelayerFeeCapUpdated(uint256,uint256,address)"(
      oldRelayerFeeCap?: null,
      newRelayerFeeCap?: null,
      caller?: null
    ): RelayerFeeCapUpdatedEventFilter;
    RelayerFeeCapUpdated(
      oldRelayerFeeCap?: null,
      newRelayerFeeCap?: null,
      caller?: null
    ): RelayerFeeCapUpdatedEventFilter;

    "TokenExchangeUpdated(address,address,address,address)"(
      token?: null,
      oldTokenExchange?: null,
      newTokenExchange?: null,
      caller?: null
    ): TokenExchangeUpdatedEventFilter;
    TokenExchangeUpdated(
      token?: null,
      oldTokenExchange?: null,
      newTokenExchange?: null,
      caller?: null
    ): TokenExchangeUpdatedEventFilter;

    "Withdraw(address,address,uint256,address)"(
      token?: null,
      receiver?: null,
      amount?: null,
      caller?: null
    ): WithdrawEventFilter;
    Withdraw(
      token?: null,
      receiver?: null,
      amount?: null,
      caller?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    connext(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasTokenOracle(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFeeCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceDiffPercent(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reimburseLiquidityFees(
      _token: PromiseOrValue<string>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reimburseRelayerFees(
      _originDomain: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _originRelayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reimbursedLiquidityFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayerFeeCap(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasTokenOracle(
      _gasTokenOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityFeeCap(
      _asset: PromiseOrValue<string>,
      _liquidityFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPriceDiffPercent(
      _maxPriceDiffPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRate(
      _originDomain: PromiseOrValue<BigNumberish>,
      _rate: SponsorVault.RateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayerFeeCap(
      _relayerFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenExchange(
      _token: PromiseOrValue<string>,
      _tokenExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenExchanges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasTokenOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityFeeCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceDiffPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reimburseLiquidityFees(
      _token: PromiseOrValue<string>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reimburseRelayerFees(
      _originDomain: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _originRelayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reimbursedLiquidityFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerFeeCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasTokenOracle(
      _gasTokenOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFeeCap(
      _asset: PromiseOrValue<string>,
      _liquidityFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceDiffPercent(
      _maxPriceDiffPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRate(
      _originDomain: PromiseOrValue<BigNumberish>,
      _rate: SponsorVault.RateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerFeeCap(
      _relayerFeeCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenExchange(
      _token: PromiseOrValue<string>,
      _tokenExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenExchanges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
